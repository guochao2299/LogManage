#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LogService
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LogCenter")]
	public partial class LogDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSystemParam(SystemParam instance);
    partial void UpdateSystemParam(SystemParam instance);
    partial void DeleteSystemParam(SystemParam instance);
    partial void InsertTable(Table instance);
    partial void UpdateTable(Table instance);
    partial void DeleteTable(Table instance);
    partial void InsertLogContent(LogContent instance);
    partial void UpdateLogContent(LogContent instance);
    partial void DeleteLogContent(LogContent instance);
    partial void InsertColumn(Column instance);
    partial void UpdateColumn(Column instance);
    partial void DeleteColumn(Column instance);
    partial void InsertActionResult(ActionResult instance);
    partial void UpdateActionResult(ActionResult instance);
    partial void DeleteActionResult(ActionResult instance);
    partial void InsertRulesEvent(RulesEvent instance);
    partial void UpdateRulesEvent(RulesEvent instance);
    partial void DeleteRulesEvent(RulesEvent instance);
    partial void InsertRulesCondition(RulesCondition instance);
    partial void UpdateRulesCondition(RulesCondition instance);
    partial void DeleteRulesCondition(RulesCondition instance);
    partial void InsertRulesAction(RulesAction instance);
    partial void UpdateRulesAction(RulesAction instance);
    partial void DeleteRulesAction(RulesAction instance);
    partial void InsertTableStruct(TableStruct instance);
    partial void UpdateTableStruct(TableStruct instance);
    partial void DeleteTableStruct(TableStruct instance);
    partial void InsertApp(App instance);
    partial void UpdateApp(App instance);
    partial void DeleteApp(App instance);
    partial void InsertAppGroupName(AppGroupName instance);
    partial void UpdateAppGroupName(AppGroupName instance);
    partial void DeleteAppGroupName(AppGroupName instance);
    #endregion
		
		public LogDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["LogCenterConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LogDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LogDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LogDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LogDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SystemParam> SystemParams
		{
			get
			{
				return this.GetTable<SystemParam>();
			}
		}
		
		public System.Data.Linq.Table<Table> Tables
		{
			get
			{
				return this.GetTable<Table>();
			}
		}
		
		public System.Data.Linq.Table<LogContent> LogContents
		{
			get
			{
				return this.GetTable<LogContent>();
			}
		}
		
		public System.Data.Linq.Table<Column> Columns
		{
			get
			{
				return this.GetTable<Column>();
			}
		}
		
		public System.Data.Linq.Table<ActionResult> ActionResults
		{
			get
			{
				return this.GetTable<ActionResult>();
			}
		}
		
		public System.Data.Linq.Table<RulesEvent> RulesEvents
		{
			get
			{
				return this.GetTable<RulesEvent>();
			}
		}
		
		public System.Data.Linq.Table<RulesCondition> RulesConditions
		{
			get
			{
				return this.GetTable<RulesCondition>();
			}
		}
		
		public System.Data.Linq.Table<RulesAction> RulesActions
		{
			get
			{
				return this.GetTable<RulesAction>();
			}
		}
		
		public System.Data.Linq.Table<TableStruct> TableStructs
		{
			get
			{
				return this.GetTable<TableStruct>();
			}
		}
		
		public System.Data.Linq.Table<App> Apps
		{
			get
			{
				return this.GetTable<App>();
			}
		}
		
		public System.Data.Linq.Table<AppGroupName> AppGroupNames
		{
			get
			{
				return this.GetTable<AppGroupName>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.pr_IsColumnOfTableExist")]
		public int pr_IsColumnOfTableExist([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(255)")] string tableName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(255)")] string columnName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tableName, columnName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.pr_IsTableExist")]
		public int pr_IsTableExist([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(255)")] string tableName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tableName);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SystemParams")]
	public partial class SystemParam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public SystemParam()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(100)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tables")]
	public partial class Table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _GUID;
		
		private string _Owner;
		
		private bool _IsRemoved;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGUIDChanging(string value);
    partial void OnGUIDChanged();
    partial void OnOwnerChanging(string value);
    partial void OnOwnerChanged();
    partial void OnIsRemovedChanging(bool value);
    partial void OnIsRemovedChanged();
    #endregion
		
		public Table()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Owner", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					this.OnOwnerChanging(value);
					this.SendPropertyChanging();
					this._Owner = value;
					this.SendPropertyChanged("Owner");
					this.OnOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRemoved", DbType="Bit NOT NULL")]
		public bool IsRemoved
		{
			get
			{
				return this._IsRemoved;
			}
			set
			{
				if ((this._IsRemoved != value))
				{
					this.OnIsRemovedChanging(value);
					this.SendPropertyChanging();
					this._IsRemoved = value;
					this.SendPropertyChanged("IsRemoved");
					this.OnIsRemovedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LogContent")]
	public partial class LogContent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AppGuid;
		
		private string _TableGuid;
		
		private string _RecordGuid;
		
		private int _ColIndex;
		
		private int _Line;
		
		private string _Content;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppGuidChanging(string value);
    partial void OnAppGuidChanged();
    partial void OnTableGuidChanging(string value);
    partial void OnTableGuidChanged();
    partial void OnRecordGuidChanging(string value);
    partial void OnRecordGuidChanged();
    partial void OnColIndexChanging(int value);
    partial void OnColIndexChanged();
    partial void OnLineChanging(int value);
    partial void OnLineChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    #endregion
		
		public LogContent()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppGuid", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AppGuid
		{
			get
			{
				return this._AppGuid;
			}
			set
			{
				if ((this._AppGuid != value))
				{
					this.OnAppGuidChanging(value);
					this.SendPropertyChanging();
					this._AppGuid = value;
					this.SendPropertyChanged("AppGuid");
					this.OnAppGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableGuid", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TableGuid
		{
			get
			{
				return this._TableGuid;
			}
			set
			{
				if ((this._TableGuid != value))
				{
					this.OnTableGuidChanging(value);
					this.SendPropertyChanging();
					this._TableGuid = value;
					this.SendPropertyChanged("TableGuid");
					this.OnTableGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordGuid", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RecordGuid
		{
			get
			{
				return this._RecordGuid;
			}
			set
			{
				if ((this._RecordGuid != value))
				{
					this.OnRecordGuidChanging(value);
					this.SendPropertyChanging();
					this._RecordGuid = value;
					this.SendPropertyChanged("RecordGuid");
					this.OnRecordGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColIndex", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ColIndex
		{
			get
			{
				return this._ColIndex;
			}
			set
			{
				if ((this._ColIndex != value))
				{
					this.OnColIndexChanging(value);
					this.SendPropertyChanging();
					this._ColIndex = value;
					this.SendPropertyChanged("ColIndex");
					this.OnColIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Line", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Line
		{
			get
			{
				return this._Line;
			}
			set
			{
				if ((this._Line != value))
				{
					this.OnLineChanging(value);
					this.SendPropertyChanging();
					this._Line = value;
					this.SendPropertyChanged("Line");
					this.OnLineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="VarChar(250)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Columns")]
	public partial class Column : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private int _ColIndex;
		
		private string _Type;
		
		private bool _IsRemoved;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnColIndexChanging(int value);
    partial void OnColIndexChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnIsRemovedChanging(bool value);
    partial void OnIsRemovedChanged();
    #endregion
		
		public Column()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColIndex", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ColIndex
		{
			get
			{
				return this._ColIndex;
			}
			set
			{
				if ((this._ColIndex != value))
				{
					this.OnColIndexChanging(value);
					this.SendPropertyChanging();
					this._ColIndex = value;
					this.SendPropertyChanged("ColIndex");
					this.OnColIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRemoved", DbType="Bit NOT NULL")]
		public bool IsRemoved
		{
			get
			{
				return this._IsRemoved;
			}
			set
			{
				if ((this._IsRemoved != value))
				{
					this.OnIsRemovedChanging(value);
					this.SendPropertyChanging();
					this._IsRemoved = value;
					this.SendPropertyChanged("IsRemoved");
					this.OnIsRemovedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActionResult")]
	public partial class ActionResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ResultGuid;
		
		private string _Description;
		
		private int _BackGroundColor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResultGuidChanging(string value);
    partial void OnResultGuidChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnBackGroundColorChanging(int value);
    partial void OnBackGroundColorChanged();
    #endregion
		
		public ActionResult()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultGuid", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ResultGuid
		{
			get
			{
				return this._ResultGuid;
			}
			set
			{
				if ((this._ResultGuid != value))
				{
					this.OnResultGuidChanging(value);
					this.SendPropertyChanging();
					this._ResultGuid = value;
					this.SendPropertyChanged("ResultGuid");
					this.OnResultGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BackGroundColor", DbType="Int NOT NULL")]
		public int BackGroundColor
		{
			get
			{
				return this._BackGroundColor;
			}
			set
			{
				if ((this._BackGroundColor != value))
				{
					this.OnBackGroundColorChanging(value);
					this.SendPropertyChanging();
					this._BackGroundColor = value;
					this.SendPropertyChanged("BackGroundColor");
					this.OnBackGroundColorChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RulesEvent")]
	public partial class RulesEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _Guid;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGuidChanging(string value);
    partial void OnGuidChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public RulesEvent()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Guid", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Guid
		{
			get
			{
				return this._Guid;
			}
			set
			{
				if ((this._Guid != value))
				{
					this.OnGuidChanging(value);
					this.SendPropertyChanging();
					this._Guid = value;
					this.SendPropertyChanged("Guid");
					this.OnGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(250)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RulesCondition")]
	public partial class RulesCondition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _RuleHeadGuid;
		
		private string _ConditionGuid;
		
		private string _Description;
		
		private int _ColIndexSrc;
		
		private bool _IsUsingDestCol;
		
		private System.Nullable<int> _ColIndexDest;
		
		private string _Relation;
		
		private string _Condition;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRuleHeadGuidChanging(string value);
    partial void OnRuleHeadGuidChanged();
    partial void OnConditionGuidChanging(string value);
    partial void OnConditionGuidChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnColIndexSrcChanging(int value);
    partial void OnColIndexSrcChanged();
    partial void OnIsUsingDestColChanging(bool value);
    partial void OnIsUsingDestColChanged();
    partial void OnColIndexDestChanging(System.Nullable<int> value);
    partial void OnColIndexDestChanged();
    partial void OnRelationChanging(string value);
    partial void OnRelationChanged();
    partial void OnConditionChanging(string value);
    partial void OnConditionChanged();
    #endregion
		
		public RulesCondition()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleHeadGuid", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RuleHeadGuid
		{
			get
			{
				return this._RuleHeadGuid;
			}
			set
			{
				if ((this._RuleHeadGuid != value))
				{
					this.OnRuleHeadGuidChanging(value);
					this.SendPropertyChanging();
					this._RuleHeadGuid = value;
					this.SendPropertyChanged("RuleHeadGuid");
					this.OnRuleHeadGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConditionGuid", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ConditionGuid
		{
			get
			{
				return this._ConditionGuid;
			}
			set
			{
				if ((this._ConditionGuid != value))
				{
					this.OnConditionGuidChanging(value);
					this.SendPropertyChanging();
					this._ConditionGuid = value;
					this.SendPropertyChanged("ConditionGuid");
					this.OnConditionGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColIndexSrc", DbType="Int NOT NULL")]
		public int ColIndexSrc
		{
			get
			{
				return this._ColIndexSrc;
			}
			set
			{
				if ((this._ColIndexSrc != value))
				{
					this.OnColIndexSrcChanging(value);
					this.SendPropertyChanging();
					this._ColIndexSrc = value;
					this.SendPropertyChanged("ColIndexSrc");
					this.OnColIndexSrcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsUsingDestCol", DbType="Bit NOT NULL")]
		public bool IsUsingDestCol
		{
			get
			{
				return this._IsUsingDestCol;
			}
			set
			{
				if ((this._IsUsingDestCol != value))
				{
					this.OnIsUsingDestColChanging(value);
					this.SendPropertyChanging();
					this._IsUsingDestCol = value;
					this.SendPropertyChanged("IsUsingDestCol");
					this.OnIsUsingDestColChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColIndexDest", DbType="Int")]
		public System.Nullable<int> ColIndexDest
		{
			get
			{
				return this._ColIndexDest;
			}
			set
			{
				if ((this._ColIndexDest != value))
				{
					this.OnColIndexDestChanging(value);
					this.SendPropertyChanging();
					this._ColIndexDest = value;
					this.SendPropertyChanged("ColIndexDest");
					this.OnColIndexDestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Relation", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Relation
		{
			get
			{
				return this._Relation;
			}
			set
			{
				if ((this._Relation != value))
				{
					this.OnRelationChanging(value);
					this.SendPropertyChanging();
					this._Relation = value;
					this.SendPropertyChanged("Relation");
					this.OnRelationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Condition", DbType="VarChar(250)")]
		public string Condition
		{
			get
			{
				return this._Condition;
			}
			set
			{
				if ((this._Condition != value))
				{
					this.OnConditionChanging(value);
					this.SendPropertyChanging();
					this._Condition = value;
					this.SendPropertyChanged("Condition");
					this.OnConditionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RulesAction")]
	public partial class RulesAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _RuleEventGuid;
		
		private string _RuleHeadGuid;
		
		private string _Name;
		
		private string _Description;
		
		private int _Sequence;
		
		private string _Result;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRuleEventGuidChanging(string value);
    partial void OnRuleEventGuidChanged();
    partial void OnRuleHeadGuidChanging(string value);
    partial void OnRuleHeadGuidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSequenceChanging(int value);
    partial void OnSequenceChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    #endregion
		
		public RulesAction()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleEventGuid", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RuleEventGuid
		{
			get
			{
				return this._RuleEventGuid;
			}
			set
			{
				if ((this._RuleEventGuid != value))
				{
					this.OnRuleEventGuidChanging(value);
					this.SendPropertyChanging();
					this._RuleEventGuid = value;
					this.SendPropertyChanged("RuleEventGuid");
					this.OnRuleEventGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleHeadGuid", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RuleHeadGuid
		{
			get
			{
				return this._RuleHeadGuid;
			}
			set
			{
				if ((this._RuleHeadGuid != value))
				{
					this.OnRuleHeadGuidChanging(value);
					this.SendPropertyChanging();
					this._RuleHeadGuid = value;
					this.SendPropertyChanged("RuleHeadGuid");
					this.OnRuleHeadGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sequence", DbType="Int NOT NULL")]
		public int Sequence
		{
			get
			{
				return this._Sequence;
			}
			set
			{
				if ((this._Sequence != value))
				{
					this.OnSequenceChanging(value);
					this.SendPropertyChanging();
					this._Sequence = value;
					this.SendPropertyChanged("Sequence");
					this.OnSequenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="VarChar(50)")]
		public string Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TableStructs")]
	public partial class TableStruct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TableGUID;
		
		private int _ColIndex;
		
		private int _SeqIndex;
		
		private string _NickName;
		
		private bool _Visible;
		
		private bool _IsFilterColumn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTableGUIDChanging(string value);
    partial void OnTableGUIDChanged();
    partial void OnColIndexChanging(int value);
    partial void OnColIndexChanged();
    partial void OnSeqIndexChanging(int value);
    partial void OnSeqIndexChanged();
    partial void OnNickNameChanging(string value);
    partial void OnNickNameChanged();
    partial void OnVisibleChanging(bool value);
    partial void OnVisibleChanged();
    partial void OnIsFilterColumnChanging(bool value);
    partial void OnIsFilterColumnChanged();
    #endregion
		
		public TableStruct()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableGUID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TableGUID
		{
			get
			{
				return this._TableGUID;
			}
			set
			{
				if ((this._TableGUID != value))
				{
					this.OnTableGUIDChanging(value);
					this.SendPropertyChanging();
					this._TableGUID = value;
					this.SendPropertyChanged("TableGUID");
					this.OnTableGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColIndex", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ColIndex
		{
			get
			{
				return this._ColIndex;
			}
			set
			{
				if ((this._ColIndex != value))
				{
					this.OnColIndexChanging(value);
					this.SendPropertyChanging();
					this._ColIndex = value;
					this.SendPropertyChanged("ColIndex");
					this.OnColIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeqIndex", DbType="Int NOT NULL")]
		public int SeqIndex
		{
			get
			{
				return this._SeqIndex;
			}
			set
			{
				if ((this._SeqIndex != value))
				{
					this.OnSeqIndexChanging(value);
					this.SendPropertyChanging();
					this._SeqIndex = value;
					this.SendPropertyChanged("SeqIndex");
					this.OnSeqIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NickName", DbType="VarChar(50)")]
		public string NickName
		{
			get
			{
				return this._NickName;
			}
			set
			{
				if ((this._NickName != value))
				{
					this.OnNickNameChanging(value);
					this.SendPropertyChanging();
					this._NickName = value;
					this.SendPropertyChanged("NickName");
					this.OnNickNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Visible", DbType="Bit NOT NULL")]
		public bool Visible
		{
			get
			{
				return this._Visible;
			}
			set
			{
				if ((this._Visible != value))
				{
					this.OnVisibleChanging(value);
					this.SendPropertyChanging();
					this._Visible = value;
					this.SendPropertyChanged("Visible");
					this.OnVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFilterColumn", DbType="Bit NOT NULL")]
		public bool IsFilterColumn
		{
			get
			{
				return this._IsFilterColumn;
			}
			set
			{
				if ((this._IsFilterColumn != value))
				{
					this.OnIsFilterColumnChanging(value);
					this.SendPropertyChanging();
					this._IsFilterColumn = value;
					this.SendPropertyChanged("IsFilterColumn");
					this.OnIsFilterColumnChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.App")]
	public partial class App : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AppGroup;
		
		private string _Name;
		
		private string _GUID;
		
		private bool _IsImportLogsFromFile;
		
		private bool _IsRemoved;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppGroupChanging(string value);
    partial void OnAppGroupChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGUIDChanging(string value);
    partial void OnGUIDChanged();
    partial void OnIsImportLogsFromFileChanging(bool value);
    partial void OnIsImportLogsFromFileChanged();
    partial void OnIsRemovedChanging(bool value);
    partial void OnIsRemovedChanged();
    #endregion
		
		public App()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppGroup", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string AppGroup
		{
			get
			{
				return this._AppGroup;
			}
			set
			{
				if ((this._AppGroup != value))
				{
					this.OnAppGroupChanging(value);
					this.SendPropertyChanging();
					this._AppGroup = value;
					this.SendPropertyChanged("AppGroup");
					this.OnAppGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsImportLogsFromFile", DbType="Bit NOT NULL")]
		public bool IsImportLogsFromFile
		{
			get
			{
				return this._IsImportLogsFromFile;
			}
			set
			{
				if ((this._IsImportLogsFromFile != value))
				{
					this.OnIsImportLogsFromFileChanging(value);
					this.SendPropertyChanging();
					this._IsImportLogsFromFile = value;
					this.SendPropertyChanged("IsImportLogsFromFile");
					this.OnIsImportLogsFromFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRemoved", DbType="Bit NOT NULL")]
		public bool IsRemoved
		{
			get
			{
				return this._IsRemoved;
			}
			set
			{
				if ((this._IsRemoved != value))
				{
					this.OnIsRemovedChanging(value);
					this.SendPropertyChanging();
					this._IsRemoved = value;
					this.SendPropertyChanged("IsRemoved");
					this.OnIsRemovedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AppGroupName")]
	public partial class AppGroupName : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AppGroupName()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
